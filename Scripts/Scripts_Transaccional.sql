-- 1. ESTADO
CREATE TABLE ESTADO (
    ID_ESTADO SERIAL,
    NOMBRE VARCHAR(100),
    Constraint PK_Estado Primary Key (ID_ESTADO)
);

-- 2. CIUDAD (depende de ESTADO)
CREATE TABLE CIUDAD (
    ID_CIUDAD SERIAL,
    NOMBRE VARCHAR(100),
    ID_ESTADO INTEGER,
    Constraint FK_Ciudad_Estado FOREIGN KEY (ID_ESTADO) REFERENCES ESTADO(ID_ESTADO),
    Constraint PK_Ciudad Primary Key (ID_CIUDAD)
);

-- 3. SEXO
CREATE TABLE SEXO (
    ID_SEXO SERIAL,
    DESCRIPCION VARCHAR(50),
    Constraint PK_Sexo Primary Key (ID_SEXO)
);

-- 4. ESTADO_CIVIL
CREATE TABLE ESTADO_CIVIL (
    ID_ESTADO_CIVIL SERIAL,
    DESCRIPCION VARCHAR(100),
    Constraint PK_Estado_Civil Primary Key ( ID_ESTADO_CIVIL)
);

-- 5. ESPECIALIDAD
CREATE TABLE ESPECIALIDAD (
    ID_ESPECIALIDAD SERIAL,
    DESCRIPCION VARCHAR(100),
    Constraint PK_Especialidad Primary Key ( ID_ESPECIALIDAD)
);

-- 6. TIPO_PROVEEDOR
CREATE TABLE TIPO_PROVEEDOR (
    ID_TIPO SERIAL,
    DESCRIPCION VARCHAR(100),
    Constraint PK_Tipo_Proveedor Primary Key (ID_TIPO)
);

-- 7. PROVEEDOR (depende de CIUDAD y TIPO_PROVEEDOR)
CREATE TABLE PROVEEDOR (
    ID_PROVEEDOR SERIAL,
    NOMBRE VARCHAR(100),
    RIF VARCHAR(20),
    TELEFONO VARCHAR(20),
    FAX VARCHAR(30),
    DIRECCION VARCHAR(255),
    TIPO INTEGER NOT NULL,
    ID_CIUDAD INTEGER NOT NULL,
    Constraint PK_Proveedor Primary Key (ID_PROVEEDOR),
    Constraint FK_Tipo_Proveeedor FOREIGN KEY (TIPO) REFERENCES TIPO_PROVEEDOR(ID_TIPO),
    Constraint FK_Ciudad  FOREIGN KEY (ID_CIUDAD) REFERENCES CIUDAD(ID_CIUDAD)
);

-- 8. MEDICAMENTO (depende de PROVEEDOR)
CREATE TABLE MEDICAMENTO (
    ID_MEDICAMENTO SERIAL,
    NOMBRE VARCHAR(100),
    PRESENTACION VARCHAR(100),
    POSOLOGIA VARCHAR(255),
    EFECTOS_SECUNDARIOS VARCHAR(255),
    PROVEEDOR INTEGER NOT NULL,
    Constraint PK_Medicamento Primary Key (ID_MEDICAMENTO),
    Constraint FK_Proveedor FOREIGN KEY (PROVEEDOR) REFERENCES PROVEEDOR(ID_PROVEEDOR)
);

-- 10. MEDICO (depende de SEXO, ESTADO_CIVIL, CIUDAD)
CREATE TABLE MEDICO (
    CEDULA INTEGER NOT NULL,
    COD_COLEGIO_MEDICOS INTEGER,
    NOMBRE VARCHAR(100),
    APELLIDO VARCHAR(100),
    FECHA_NACIMIENTO DATE,
    FECHA_CONTRATACION DATE,
    SEXO INTEGER NOT NULL,
    ESTADO_CIVIL INTEGER NOT NULL,
    ID_CIUDAD INTEGER NOT NULL,
    Constraint PK_MEDICO Primary Key (CEDULA),
    Constraint FK_Sexo FOREIGN KEY (SEXO) REFERENCES SEXO(ID_SEXO),
    Constraint FK_Estado_Civil FOREIGN KEY (ESTADO_CIVIL) REFERENCES ESTADO_CIVIL(ID_ESTADO_CIVIL),
    Constraint FK_Ciudad FOREIGN KEY (ID_CIUDAD) REFERENCES CIUDAD(ID_CIUDAD)
);

-- 9. AREA (depende de ESPECIALIDAD y MEDICO)
CREATE TABLE AREA (
    ID_AREA SERIAL,
    ESPECIALIDAD INTEGER NOT NULL,
    CI_MEDICO_ENCARGADO INTEGER NOT NULL,
    PISO INTEGER,
    PASILLO INTEGER,
    Constraint PK_Area Primary Key (ID_AREA),
    Constraint FK_Especialidad FOREIGN KEY (ESPECIALIDAD) REFERENCES ESPECIALIDAD(ID_ESPECIALIDAD),
    Constraint FK_Medico FOREIGN KEY (CI_MEDICO_ENCARGADO) REFERENCES MEDICO(CEDULA)
);

-- 10. PERSONAL_SANITARIO (depende de AREA)
CREATE TABLE PERSONAL_SANITARIO (
    CI_PERSONAL INTEGER NOT NULL,
    NOMBRE VARCHAR(100),
    APELLIDO VARCHAR(100),
    FUNCION VARCHAR(100),
    ID_AREA INTEGER NOT NULL,
    ESTADO_CIVIL INTEGER NOT NULL,
    SEXO INTEGER NOT NULL,
    NACIONALIDAD VARCHAR(50),
    Constraint PK_Personal Primary Key (CI_PERSONAL),
    Constraint FK_Sexo FOREIGN KEY (SEXO) REFERENCES SEXO(ID_SEXO),
    Constraint FK_Estado_Civil FOREIGN KEY (ESTADO_CIVIL) REFERENCES ESTADO_CIVIL(ID_ESTADO_CIVIL),
    Constraint FK_Area FOREIGN KEY (ID_AREA) REFERENCES AREA(ID_AREA)
);

-- 12. TRABAJA (depende de MEDICO y AREA)
CREATE TABLE TRABAJA (
    ID_MEDICO INTEGER NOT NULL,
    ID_AREA INTEGER NOT NULL,
    FECHA DATE NOT NULL,
    Constraint PK_Trabaja PRIMARY KEY (ID_MEDICO, ID_AREA),
    Constraint FK_Medico FOREIGN KEY (ID_MEDICO) REFERENCES MEDICO(CEDULA),
    Constraint FK_Areal FOREIGN KEY (ID_AREA) REFERENCES AREA(ID_AREA)
);

-- 13. PACIENTE (depende de SEXO, ESTADO_CIVIL, CIUDAD)
CREATE TABLE PACIENTE (
    CEDULA INTEGER NOT NULL,
    NOMBRE VARCHAR(100),
    APELLIDO VARCHAR(100),
    FECHA_NACIMIENTO DATE,
    TIPO_SANGRE VARCHAR(5),
    NACIONALIDAD VARCHAR(50),
    ESTADO_CIVIL INTEGER NOT NULL,
    SEXO INTEGER NOT NULL,
    ID_CIUDAD INTEGER NOT NULL,
    Constraint PK_Paciente PRIMARY KEY (CEDULA),
    Constraint FK_Sexo FOREIGN KEY (SEXO) REFERENCES SEXO(ID_SEXO),
    Constraint FK_Estado_Civil FOREIGN KEY (ESTADO_CIVIL) REFERENCES ESTADO_CIVIL(ID_ESTADO_CIVIL),
    Constraint FK_Ciudad FOREIGN KEY (ID_CIUDAD) REFERENCES CIUDAD(ID_CIUDAD)
);

-- 14. INTERVENCION
CREATE TABLE INTERVENCION (
    ID_INTERVENCION SERIAL,
    DESCRIPCION VARCHAR(100),
    TIPO VARCHAR(50),
    Constraint PK_Intervencion PRIMARY KEY (ID_INTERVENCION)
);

-- 15. DIAGNOSTICO
CREATE TABLE DIAGNOSTICO (
    ID_DIAGNOSTICO SERIAL,
    NOMBRE VARCHAR(60),
    DESCRIPCION VARCHAR(100),
    TIPO VARCHAR(100),
    COSTO FLOAT,
    Constraint PK_Diagnostico PRIMARY KEY (ID_DIAGNOSTICO)
);

-- 16. REALIZA (depende de MEDICO, PACIENTE y DIAGNOSTICO)
CREATE TABLE REALIZA (
    CI_MEDICO INTEGER NOT NULL,
    CI_PACIENTE INTEGER NOT NULL,
    ID_DIAGNOSTICO INTEGER NOT NULL,
    NUMERO_INGRESO INTEGER,
    FECHA_ELABORACION DATE NOT NULL,
    Constraint PK_Realiza  PRIMARY KEY (CI_MEDICO,  CI_PACIENTE,  ID_DIAGNOSTICO),
    Constraint FK_Medico FOREIGN KEY (CI_MEDICO) REFERENCES MEDICO(CEDULA),
    Constraint FK_Paciente FOREIGN KEY (CI_PACIENTE) REFERENCES PACIENTE(CEDULA),
    Constraint FK_Diagnostico FOREIGN KEY (ID_DIAGNOSTICO) REFERENCES DIAGNOSTICO(ID_DIAGNOSTICO)
);

-- 17. TIENE (depende de MEDICO y ESPECIALIDAD)
CREATE TABLE TIENE (
    CI_MEDICO INTEGER NOT NULL,
    ID_ESPECIALIDAD INTEGER NOT NULL,
    ANOS_EXPERIENCIA INTEGER,
    Constraint PK_Tiene  PRIMARY KEY (CI_MEDICO,  ID_ESPECIALIDAD),
    Constraint FK_Medico  FOREIGN KEY (CI_MEDICO) REFERENCES MEDICO(CEDULA),
    Constraint FK_Especialidad  FOREIGN KEY (ID_ESPECIALIDAD) REFERENCES ESPECIALIDAD(ID_ESPECIALIDAD)
);

-- 18. PRACTICA (depende de MEDICO, PACIENTE, INTERVENCION, PERSONAL_SANITARIO)
CREATE TABLE PRACTICA (
    CI_MEDICO INTEGER NOT NULL,
    CI_PACIENTE INTEGER NOT NULL,
    ID_INTERVENCION INTEGER NOT NULL,
    CI_PERSONAL_SANITARIO_PRIM INTEGER NOT NULL,
    CI_PERSONAL_SANITARIO_SEC INTEGER,
    FECHA_PRACTICA DATE,
    RIESGO  VARCHAR(150),
    DURACION INTEGER,
    GASTO_EQUIPOS FLOAT,
    COSTO_TOTAL FLOAT,
    HONORARIO_EQUIPO FLOAT,
    Constraint PK_Practica PRIMARY KEY (CI_MEDICO,  CI_PACIENTE,  ID_INTERVENCION,CI_PERSONAL_SANITARIO_PRIM),
    Constraint FK_Medico FOREIGN KEY (CI_MEDICO) REFERENCES MEDICO(CEDULA),
    Constraint FK_Paciente FOREIGN KEY (CI_PACIENTE) REFERENCES PACIENTE(CEDULA),
    Constraint FK_Intervencion FOREIGN KEY (ID_INTERVENCION) REFERENCES INTERVENCION(ID_INTERVENCION),
    Constraint FK_Personal_Prim FOREIGN KEY (CI_PERSONAL_SANITARIO_PRIM) REFERENCES PERSONAL_SANITARIO(CI_PERSONAL),
    Constraint FK_Personal_Sec FOREIGN KEY (CI_PERSONAL_SANITARIO_SEC) REFERENCES PERSONAL_SANITARIO(CI_PERSONAL)
);

-- 19. CAMA (depende de AREA)
CREATE TABLE CAMA (
    NUMERO_CAMA SERIAL,
    ID_AREA INTEGER NOT NULL,
    Constraint PK_Cama  PRIMARY KEY (NUMERO_CAMA,  ID_AREA),
    Constraint FK_Area  FOREIGN KEY (ID_AREA) REFERENCES AREA(ID_AREA)
);

-- 20. TRATAMIENTO
CREATE TABLE TRATAMIENTO (
    ID_TRATAMIENTO SERIAL,
    DESCRIPCION VARCHAR(100),
    COSTO FLOAT,
    Constraint PK_Tratamiento  PRIMARY KEY (ID_TRATAMIENTO)
   );

-- 21. PRESCRIBE (depende de MEDICO y PACIENTE)
CREATE TABLE PRESCRIBE (
    ID_MEDICO INTEGER NOT NULL,
    CI_PACIENTE INTEGER NOT NULL,
    ID_TRATAMIENTO INTEGER NOT NULL,
    NUMERO_INGRESO INTEGER,
    FECHA_ELABORACION DATE,
    Constraint PK_Prescribe PRIMARY KEY (ID_MEDICO, CI_PACIENTE,  ID_TRATAMIENTO),
    Constraint FK_Medico FOREIGN KEY (ID_MEDICO) REFERENCES MEDICO(CEDULA),
    Constraint FK_Paciente FOREIGN KEY (CI_PACIENTE) REFERENCES PACIENTE(CEDULA),
    Constraint FK_Tratamiento FOREIGN KEY (ID_TRATAMIENTO) REFERENCES TRATAMIENTO( ID_TRATAMIENTO)

);

-- 22. APLICA (depende de MEDICAMENTO y PRESCRIBE)
CREATE TABLE APLICA (
    MEDICAMENTO INTEGER NOT NULL,
    TRATAMIENTO INTEGER NOT NULL,
    CANT_DIAS INTEGER,
    FECHA_INICIO DATE,
    FECHA_FIN DATE,
    Constraint PK_Aplica PRIMARY KEY (MEDICAMENTO,TRATAMIENTO),
    Constraint FK_Medicamento FOREIGN KEY (MEDICAMENTO) REFERENCES MEDICAMENTO(ID_MEDICAMENTO),
    Constraint FK_Tratamiento FOREIGN KEY (TRATAMIENTO) REFERENCES TRATAMIENTO(ID_TRATAMIENTO)
);


-- 23. OCUPA
CREATE TABLE OCUPA (
    CI_PACIENTE INTEGER NOT NULL,
    NUMERO_CAMA INTEGER NOT NULL,
    ID_AREA INTEGER NOT NULL,
    FECHA_INICIO DATE,
    CANTIDAD_DIAS INTEGER,
    DIAS_CUBIERTOS_SEGURO INTEGER,
    COSTO_DIARIO FLOAT,
    STATUS VARCHAR(50),
    Constraint PK_Ocupa PRIMARY KEY (CI_PACIENTE),
    Constraint FK_Cama FOREIGN KEY (NUMERO_CAMA, ID_AREA) REFERENCES CAMA(NUMERO_CAMA,  ID_AREA)
 );





-- 23. OCUPA
DROP TABLE IF EXISTS OCUPA;

-- 22. APLICA
DROP TABLE IF EXISTS APLICA;

-- 21. PRESCRIBE
DROP TABLE IF EXISTS PRESCRIBE;

-- 20. TRATAMIENTO
DROP TABLE IF EXISTS TRATAMIENTO;

-- 19. CAMA
DROP TABLE IF EXISTS CAMA;

-- 18. PRACTICA
DROP TABLE IF EXISTS PRACTICA;

-- 17. TIENE
DROP TABLE IF EXISTS TIENE;

-- 16. REALIZA
DROP TABLE IF EXISTS REALIZA;

-- 15. DIAGNOSTICO
DROP TABLE IF EXISTS DIAGNOSTICO;

-- 14. INTERVENCION
DROP TABLE IF EXISTS INTERVENCION;

-- 13. PACIENTE
DROP TABLE IF EXISTS PACIENTE;

-- 12. TRABAJA
DROP TABLE IF EXISTS TRABAJA;

-- 11. PERSONAL_SANITARIO
DROP TABLE IF EXISTS PERSONAL_SANITARIO;

-- 10. AREA
DROP TABLE IF EXISTS AREA;

-- 9. MEDICO
DROP TABLE IF EXISTS MEDICO;

-- 8. MEDICAMENTO
DROP TABLE IF EXISTS MEDICAMENTO;

-- 7. PROVEEDOR
DROP TABLE IF EXISTS PROVEEDOR;

-- 6. TIPO_PROVEEDOR
DROP TABLE IF EXISTS TIPO_PROVEEDOR;

-- 5. ESPECIALIDAD
DROP TABLE IF EXISTS ESPECIALIDAD;

-- 4. ESTADO_CIVIL
DROP TABLE IF EXISTS ESTADO_CIVIL;

-- 3. SEXO
DROP TABLE IF EXISTS SEXO;

-- 2. CIUDAD
DROP TABLE IF EXISTS CIUDAD;

-- 1. ESTADO
DROP TABLE IF EXISTS ESTADO;


